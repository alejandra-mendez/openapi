{
    "openapi": "3.0.0",
    "info": {
        "title": "Sent Offers API (V2) - Connector Integration Guide",
        "description": "",
        "contact": {},
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://portal.{environment}.com.br/api/sent-offers",
            "description": "VTEX server url",
            "variables": {
                "environment": {
                    "description": "Environment to use. Used as part of the URL.",
                    "default": "vtexcommercestable"
                }
            }
        }
    ],
    "paths": {
        "/feeds": {
            "post": {
                "tags": [
                    "Feed"
                ],
                "summary": "Activate Feed",
                "operationId": "CreateFeed",
                "description": "The integration starts with the creation of the Feed. This endpoint is used to establish the connection between connector and seller through the Sent Offers. The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when calling this endpoint. It follows the pattern `vendor.channel`.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFeedRequest"
                            },
                            "example": {
                                "id": "{{feedId}}",
                                "affiliateId": "1234",
                                "salesPolicy": "1234"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/{feedId}": {
            "put": {
                "tags": [
                    "Feed"
                ],
                "summary": "Update Feed",
                "operationId": "UpdateFeed",
                "description": "The integration starts with the creation of the Feed. This endpoint is used to make changes in the `salesChannel`, `affiliateId`.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFeedRequest"
                            },
                            "example": {
                                "affiliateId": "4321",
                                "salesPolicy": "4321"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Feed"
                ],
                "summary": "Get Feed by feedId",
                "operationId": "RetrieveFeed",
                "description": "The integration starts with the creation of the Feed. This endpoint retrieves information of a specific feed by searching through its `feedId`.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Feed"
                ],
                "summary": "Deactivate Feed",
                "operationId": "DeleteFeed",
                "description": "The integration starts with the creation of the Feed. Use this endpoint only if a connection between seller and channel must be deactivated. If you wish to reactivate this Feed, you must repeat the process of activating the feed. When a feed is deactivated, all data related to that channel disappears for the Sent Offers user. The channel, offers, interactions, and errors will no longer be seen in the UI, but is not completely lost. Sent Offers' system still stores the interactions history. So if the feed is reactivated, the information will be shown once again.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/{feedId}/skus/{skuId}/interactions": {
            "post": {
                "tags": [
                    "Interactions"
                ],
                "summary": "Open Interaction",
                "operationId": "CreateInteraction",
                "description": "Interactions are the medium where VTEX and marketplaces interact about a specific event. They are how both agents inform Sent Offers about any changes made in an offer, in price, inventory, catalog information or status, for example. For every action that happens to the offer, the connector must create an Interaction notifying it, or update an existing one. This endpoint creates a new interaction for that SKU.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    },
                    {
                        "name": "skuId",
                        "in": "path",
                        "description": "This attribute is the SKU ID in the seller's perspective, registered in their VTEX Catalog.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "1234"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInteractionRequest"
                            },
                            "example": {
                                "startDate": "2020-10-29",
                                "source": "seller",
                                "origin": "catalog",
                                "context": "setup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/{feedId}/skus/{skuId}/interactions/{interactionId}": {
            "get": {
                "tags": [
                    "Interactions"
                ],
                "summary": "Get Interaction Data by interactionId",
                "operationId": "RetrieveInteraction",
                "description": "Interactions are the medium where VTEX and marketplaces interact about a specific event. They are how both agents inform Sent Offers about any changes made in an offer, in price, inventory, catalog information or status, for example. For every action that happens to the offer, the connector must create an Interaction notifying it, or update an existing one. This endpoint retrieves information about existing interactions, searching by its `interactionId`.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    },
                    {
                        "name": "skuId",
                        "in": "path",
                        "description": "This attribute is the SKU ID in the seller's perspective, registered in their VTEX Catalog.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "1234"
                        }
                    },
                    {
                        "name": "interactionId",
                        "in": "path",
                        "description": "This attribute is the code used to identify an existing interaction.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "d3rdjjf094ma0do"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/{feedId}/skus/{skuId}/interactions/{interactionId}/close": {
            "post": {
                "tags": [
                    "Interactions"
                ],
                "summary": "Close Interaction",
                "operationId": "CloseInteraction",
                "description": "This endpoint closes an interaction, once there are no more actions (or logs) taking place within it, and it's initial goal is fulfilled. Interactions are the medium where VTEX and marketplaces interact about a specific event. They are how both agents inform Sent Offers about any changes made in an offer, in price, inventory, catalog information or status, for example. For every action that happens to the offer, the connector must create an Interaction notifying it, or update an existing one.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    },
                    {
                        "name": "skuId",
                        "in": "path",
                        "description": "This attribute is the SKU ID in the seller's perspective, registered in their VTEX Catalog.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "1234"
                        }
                    },
                    {
                        "name": "interactionId",
                        "in": "path",
                        "description": "This attribute is the code used to identify an existing interaction.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "d3rdjjf094ma0do"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/{feedId}/skus/{skuId}/interactions/{interactionId}/logs": {
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create Log",
                "operationId": "CreateLog",
                "description": "Logs are the granular details of actions that happen within an interaction, organized in a timeline. They are the way an interaction is made visible in Sent Offer’s UI. All micro steps that go through an interaction will be represented through logs. This endpoint adds logs that take place within an interaction. To add logs in a specific interaction, the connector must take the `interactionId` created previously, through the Open  Interaction endpoint. \n\n`Errors`: When Sent Offers, or the connectors, find an error that prevents sending or updating an offer to a channel, they should open a type `failure` log, and fill in its details through the `errors` attribute. From the information sent through this attribute, sellers can identify and fix errors on their offers. Connectors must identify all errors, and send them all in a single request. This means that connectors should go through every possible validation, and only after all errors are identified, create the failure log.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    },
                    {
                        "name": "skuId",
                        "in": "path",
                        "description": "This attribute is the SKU ID in the seller's perspective, registered in their VTEX Catalog.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "1234"
                        }
                    },
                    {
                        "name": "interactionId",
                        "in": "path",
                        "description": "This attribute is the code used to identify an existing interaction.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "d3rdjjf094ma0do"
                        }
                    }
                ],
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLogRequest"
                            },
                            "example": {
                                "description": "Another log message with some information that is going to be relevant to our users",
                                "date": "2020-03-22",
                                "type": "information",
                                "agent": "broadcaster",
                                "evidence": {
                                    "request": "blablabla req",
                                    "response": "blablabla res"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/{feedId}/skus/{skuId}/interactions/{interactionId}/logs/{logId}": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get Log Data by logId",
                "operationId": "RetrieveLog",
                "description": "Logs are the granular details of actions that happen within an interaction, organized in a timeline. They are the way an interaction is made visible in Sent Offer’s UI. All micro steps that go through an interaction will be represented through logs. This endpoint retrieves the information of a given log, by searching through its `logId`.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "feedId",
                        "in": "path",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when establishing the connection between the two. It follows the pattern `vendor.channel`.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "vtex.amazon"
                        }
                    },
                    {
                        "name": "skuId",
                        "in": "path",
                        "description": "This attribute is the SKU ID in the seller's perspective, registered in their VTEX Catalog.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "1234"
                        }
                    },
                    {
                        "name": "interactionId",
                        "in": "path",
                        "description": "This attribute is the code used to identify an existing interaction.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "d3rdjjf094ma0do"
                        }
                    },
                    {
                        "name": "logId",
                        "in": "path",
                        "description": "A log's identifying code. This attribute is obtained from the Open Log API, or from the response of a Search Interactions API.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "123456"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/search/interactions": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search Interactions and their Logs",
                "operationId": "SearchInteractions",
                "description": "This endpoint retrieves interactions and all logs within it. Filter interactions, by using the following query params: `channel`, `brand`, `category`, `scope`, `result`, `fromDate`, `toDate`. This endpoint also counts with the following pagination query parms: `sort`, `from`, `to`.",
                "parameters": [
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as a query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{query}}"
                        }
                    },
                    {
                        "name": "channels",
                        "in": "query",
                        "description": "Search interactions, filtering by channel.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{channelName}}"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "Search interactions, filtering by brand.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{brand}}"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Search interactions, filtering by category.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{category}}"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "Search interactions, filtering by scope.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{scope}}"
                        }
                    },
                    {
                        "name": "result",
                        "in": "query",
                        "description": "Search interactions, filtering by result. Results can have the following values: \n\nSuccess: When events close their lifecycle successfully, and generate updates on an offer in terms of price, inventory, or catalog. \n\nFailure: When the connector has detected processes that have failed to be made  due to an error. \n\nNotification: When there are processes with the connector that are worth mentioning, but there are no actual updates. Ex: discarded updates or sendings of an offer. \n\nProcessing:  When an open interaction hasn’t been concluded, and should still receive more steps. This is a transitory state, considering that when an interaction is closed, it can only end with `success`, `failure` or `notification` as its result.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{result}}"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Search interactions, filtering by sort.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{sort}}"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{from}}"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{to}}"
                        }
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{fromDate}}"
                        }
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "{{toDate}}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/search/errors": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search Errors",
                "operationId": "SearchErrors",
                "description": "This endpoint retrieves all the error codes currently available in the Sent Offers' configuration. Its response is the single source of truth for the updated list of error codes. The connector will retrieve all the error codes available directly on this API, and use the codes that apply the most to their error scenarios. Then, the connector will implement these codes into every validation error inside their system. Filter errors by using the following query params: `channel`, `brand`, `category`, `errorCategory`. This endpoint also counts with the following pagination query parms: `sort`, `from`, `to`. `q`.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "description": "Name of the VTEX account. Used as query param.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{accountName}}"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Customizable field for searching error codes.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{query}}"
                        }
                    },
                    {
                        "name": "channels",
                        "in": "query",
                        "description": "Search errors filtering by channels.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{channels}}"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "Search errors filtering by brand.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{brand}}"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Search errors filtering by category.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{category}}"
                        }
                    },
                    {
                        "name": "errorCategory",
                        "in": "query",
                        "description": "Search errors filtering by error category.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{errorCategory}}"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{sort}}"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{from}}"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "{{to}}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        },
        "/error-codes/{errorCodeId}": {
            "get": {
                "tags": [
                    "Error Codes"
                ],
                "summary": "Get Error Code data by errorCodeId",
                "operationId": "RetrieveErrorCode",
                "description": "This endpoint retrieves a specific error code's information. Its response is the single source of truth for the updated information of that error. The connector will retrieve all the error codes available directly on this API, and use the codes that apply the most to their error scenarios. Then, the connector will implement these codes into every validation error inside their system.",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Describes the type of the content being sent",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "Accept",
                        "in": "header",
                        "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand ",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    },
                    {
                        "name": "errorCodeId",
                        "in": "path",
                        "description": "Id for the error code chosen.",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "default": ""
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "deprecated": false
            }
        }
    },
    "security": [
        {
            "appKey": [],
            "appToken": []
        }
    ],
    "components": {
        "securitySchemes": {
            "appKey": {
                "type": "apiKey",
                "in": "header",
                "name": "X-VTEX-API-AppKey"
            },
            "appToken": {
                "type": "apiKey",
                "in": "header",
                "name": "X-VTEX-API-AppToken"
            }
        },
        "schemas": {
            "CreateFeedRequest": {
                "title": "CreateFeedRequest",
                "required": [
                    "id",
                    "affiliateId",
                    "salesPolicy"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when calling this endpoint. It follows the pattern `vendor.channel`.",
                        "default": "vtex.amazon"
                    },
                    "affiliateId": {
                        "type": "string",
                        "description": "This attribute is created by the seller, in their VTEX store configuration.",
                        "default": "1234"
                    },
                    "salesPolicy": {
                        "type": "string",
                        "description": "This attribute is created by the seller, in their VTEX store configuration.",
                        "default": "1"
                    }
                }
            },
            "UpdateFeedRequest": {
                "title": "UpdateFeedRequest",
                "required": [
                    "affiliateId",
                    "salesPolicy"
                ],
                "type": "object",
                "properties": {
                    "affiliateId": {
                        "type": "string",
                        "description": "This attribute is created by the seller, in their VTEX store configuration.",
                        "default": "1234"
                    },
                    "salesPolicy": {
                        "type": "string",
                        "description": "This attribute is created by the seller, in their VTEX store configuration.",
                        "default": "1"
                    }
                }
            },
            "UpsertPinnedFeedsRequest": {
                "title": "UpsertPinnedFeedsRequest",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The `feedId` attribute that identifies a feed between a seller and a channel, follows a standardized pattern that will be used by connectors when calling this endpoint. It follows the pattern `vendor.channel`.",
                        "default": "vtex.amazon"
                    }
                }
            },
            "CreateInteractionRequest": {
                "title": "CreateInteractionRequest",
                "required": [
                    "startDate",
                    "source",
                    "origin",
                    "context"
                ],
                "type": "object",
                "properties": {
                    "startDate": {
                        "type": "string",
                        "default": "2020-10-29"
                    },
                    "source": {
                        "type": "string",
                        "description": "This attribute defines the entity responsible for the interaction. Possible values include `seller` or `channel`.",
                        "default": "seller"
                    },
                    "origin": {
                        "type": "string",
                        "description": "This attribute defines where the interaction originated from. Possible values include `catalog`, `price` or `inventory`. Interactions are usually used to deal with a single type of process at a time. However, there are situations in which data about catalog, price and inventory are added in the same interaction.",
                        "default": "catalog"
                    },
                    "context": {
                        "type": "string",
                        "description": "This field informs Sent Offers about an offer's lifecycle. When the integration has been recently installed, and producst are being sent for the first time, the value should be `setup`. If it's an update log, when the interaction is already up and running, the value should be `ongoing`.",
                        "default": "setup"
                    }
                }
            },
            "CreateLogRequest": {
                "title": "CreateLogRequest",
                "required": [
                    "description",
                    "date",
                    "type",
                    "agent",
                    "evidence",
                    "data",
                    "errors"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "In this field, connectors should describe relevant information about the log, so Sent Offers users can better understand the action taking place.",
                        "default": "Insert your message"
                    },
                    "date": {
                        "type": "string",
                        "description": "Logs follow a chronological timeline, so make sure the date included corresponds to the correct order of logs.",
                        "default": "2020-03-22"
                    },
                    "type": {
                        "type": "string",
                        "description": "Connectors are responsible for attributing the correct type for each log. Therefore, be mindful of their correct usage. \n\n`success`: only logs that conclude an interaction’s goal should be `“type”=”success”`. \n\n`information`: logs that expose the actions of an update process, to provide visibility and contribute with more technical investigations. Information logs may include internal processes of a system (`agent` attribute), or calls between two systems. \n\n`warning`: logs used in cases where the communication between two systems fails, and there are no actions that the user can take to fix it. They are usually cases where the connector should perform a retry, and provide visibility of what is being attempted again. \n\n`failure`: logs noticed by the connector as errors that prevent an offer from being correctly sent and synced to a channel.",
                        "default": "information"
                    },
                    "agent": {
                        "type": "string",
                        "description": "Entity responsible for creating the entry",
                        "default": "broadcaster"
                    },
                    "evidence": {
                        "$ref": "#/components/schemas/Evidence"
                    },
                    "data": {
                        "$ref": "#/components/schemas/Data"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/Errors"
                    }
                }
            },
            "Evidence": {
                "title": "Evidence",
                "description": "curl with the call that the connector has made for a VTEX system. It will provide the evidence needed to contextualize the entry, if the user needs to fully understand the process ocurred, or solve any errors.",
                "required": [
                    "request",
                    "response"
                ],
                "type": "object",
                "properties": {
                    "request": {
                        "type": "string",
                        "description": "curl with the request call that the connector has made for a VTEX system. It will provide the evidence needed to contextualize the entry, if the user needs to fully understand the process ocurred, or solve any errors.",
                        "default": "GET https://www.vtex.com"
                    },
                    "response": {
                        "type": "string",
                        "description": "curl with the response of the call that the connector has made for a VTEX system. It will provide the evidence needed to contextualize the entry, if the user needs to fully understand the process ocurred, or solve any errors.",
                        "default": "200 Ok"
                    }
                }
            },
            "Data": {
                "title": "Data",
                "description": "Data related to an offer, that will be updated or sent for the first time during setup.",
                "required": [
                    "externalOfferId",
                    "inventory",
                    "salesPrice",
                    "currency",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "externalOfferId": {
                        "type": "string",
                        "description": "The ID used by the channel to identify this offer. Fill in this field if there are any updates in that ID.",
                        "default": "123456"
                    },
                    "inventory": {
                        "type": "string",
                        "description": "Updated inventory level of that offer. Fill in this field if there are any updates in inventory.",
                        "default": "33"
                    },
                    "salesPrice": {
                        "type": "string",
                        "description": "The value the offer is being sold for, on the channel. Fill in this field if there are any updates in price.",
                        "default": "79.99"
                    },
                    "currency": {
                        "type": "string",
                        "description": "The currency applied to the offer's `salesPrice`. The international currency code should be used as value for this field. Fill in this field if there are any updates in price.",
                        "default": "BRL"
                    },
                    "status": {
                        "type": "string",
                        "description": "The offer status can have the following values: \n\n`Synced`:  when offers are successfully sent to a channel and are currently being synced between both entities.\n\n`Sending`: intermediate state, when offers are still in the process of being sent to a channel. This status involves offers that are either sent for the first time to the marketplace, migrated to a new marketplace, or resent offers that were once deleted from a channel. \n\n`Error`: when Sent Offers finds an error that prevents sending or updating an offer to a channel. Therefore this status requires manual correction. \n\n`Disabled`: when the offer is discarded by the connector, by being inactive or not included in the trade policy,",
                        "default": "disabled"
                    }
                }
            },
            "Errors": {
                "title": "Errors",
                "description": "When Sent Offers, or the connectors, find an error that prevents sending or updating an offer to a channel, they should open a `failure` log, and fill in its details through this `errors` attribute. From the information sent through this attribute, sellers can identify and fix errors on their offers. Connectors must identify all errors, and send them all in a single request. This means that connectors should go through every possible validation, and only after all errors are identified, create the failure log.",
                "required": [
                    "code",
                    "externalCode",
                    "title",
                    "description",
                    "closableOrigins"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The Search Errors endpoint returns the updated list of error codes. It is the only source of truth about the codes and where they will be always updated. Fill in this field with the code corresponding to the error identified.",
                        "default": "CTLG-001"
                    },
                    "externalCode": {
                        "type": "string",
                        "description": "Connectors must extend the Sent Offers' codes by adding their own code IDs for mapping specific scenarios that apply to their own system. They can send those codes through a suffix ID added in an existing code. This way the Sent Offers knows which errors must be archived and which errors must be kept, being able to classify that given error and improve its solving action. These suffix IDs are totally managed by the connectors, which will require them a way to map each error inside their own code.",
                        "default": "284692"
                    },
                    "title": {
                        "type": "string",
                        "description": "Short text summarizing the error identified. It will be the title that appears in the Sent Offers' UI.",
                        "default": "Description includes HTML"
                    },
                    "description": {
                        "type": "string",
                        "description": "Short text giving more context about the error identified. It will be the description of the error mentioned in the title, also appearing in the Sent Offers' UI.",
                        "default": "Netshoes does not allow HTML tags in an offer's description. Access the product in your Catalog to remove the HTML tag."
                    },
                    "closableOrigins": {
                        "type": "array",
                        "description": "Values allowed in this field are `catalog`, `price` and `inventory`.",
                        "default": "[catalog, price]"
                    }
                }
            },
            "CreateErrorCodeRequest": {
                "title": "CreateErrorCodeRequest",
                "required": [
                    "id",
                    "solutionLink"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Connectors must extend the Sent Offers' codes by adding their own code IDs for mapping specific scenarios that apply to their own system. They can send those codes through a suffix ID added in an existing code. This way the Sent Offers knows which errors must be archived and which errors must be kept, being able to classify that given error and improve its solving action. These suffix IDs are totally managed by the connectors, which will require them a way to map each error inside their own code. \n\nThe format for adding external codes should be:  \n\n`internalCode` + `connectorCode`",
                        "default": "CTLG-005-001"
                    },
                    "solutionLink": {
                        "type": "string",
                        "description": "Use this attribute to point out the solution to this error."
                    }
                },
                "default": {
                    "id": "{{errorCodeId}}",
                    "solutionLink": ""
                }
            },
            "UpdateErrorCodeRequest": {
                "title": "UpdateErrorCodeRequest",
                "required": [
                    "solutionLink"
                ],
                "type": "object",
                "properties": {
                    "solutionLink": {
                        "type": "string"
                    }
                },
                "default": {
                    "solutionLink": ""
                }
            }
        }
    },
    "tags": [
        {
            "name": "Feed"
        },
        {
            "name": "Interactions"
        },
        {
            "name": "Logs"
        },
        {
            "name": "Search"
        },
        {
            "name": "Error Codes"
        }
    ]
}